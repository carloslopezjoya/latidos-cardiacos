/* MAX30100 sensor de latido de corazón y oxímetro de pulso con comunicaciones I2C 
 *  
 *  
 *  la esperanza es lo ultimo que se pierde
 *                                  CARLOS LOPEZ :)
 */

#include <Adafruit_GFX.h>        // libreria OLED 
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#include "MAX30105.h"           // librerua MAX3010x 
#include "heartRate.h"          //
#include <BlynkSimpleEsp32.h>
#include <WiFiClient.h>

MAX30105 particleSensor;

const byte RATE_SIZE = 4; 
byte rates[RATE_SIZE]; 
byte rateSpot = 0;
long lastBeat = 0; 
float beatsPerMinute;
int beatAvg;

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 32 
#define OLED_RESET    -1 // Reset pin # 

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); 

static const unsigned char PROGMEM logo2_bmp[] =
{ 0x03, 0xC0, 0xF0, 0x06, 0x71, 0x8C, 0x0C, 0x1B, 0x06, 0x18, 0x0E, 0x02, 0x10, 0x0C, 0x03, 0x10,              //Logo2 y Logo3 ole
0x04, 0x01, 0x10, 0x04, 0x01, 0x10, 0x40, 0x01, 0x10, 0x40, 0x01, 0x10, 0xC0, 0x03, 0x08, 0x88,
0x02, 0x08, 0xB8, 0x04, 0xFF, 0x37, 0x08, 0x01, 0x30, 0x18, 0x01, 0x90, 0x30, 0x00, 0xC0, 0x60,
0x00, 0x60, 0xC0, 0x00, 0x31, 0x80, 0x00, 0x1B, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x04, 0x00,  };

static const unsigned char PROGMEM logo3_bmp[] =
{ 0x01, 0xF0, 0x0F, 0x80, 0x06, 0x1C, 0x38, 0x60, 0x18, 0x06, 0x60, 0x18, 0x10, 0x01, 0x80, 0x08,
0x20, 0x01, 0x80, 0x04, 0x40, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x02, 0xC0, 0x00, 0x08, 0x03,
0x80, 0x00, 0x08, 0x01, 0x80, 0x00, 0x18, 0x01, 0x80, 0x00, 0x1C, 0x01, 0x80, 0x00, 0x14, 0x00,
0x80, 0x00, 0x14, 0x00, 0x80, 0x00, 0x14, 0x00, 0x40, 0x10, 0x12, 0x00, 0x40, 0x10, 0x12, 0x00,
0x7E, 0x1F, 0x23, 0xFE, 0x03, 0x31, 0xA0, 0x04, 0x01, 0xA0, 0xA0, 0x0C, 0x00, 0xA0, 0xA0, 0x08,
0x00, 0x60, 0xE0, 0x10, 0x00, 0x20, 0x60, 0x20, 0x06, 0x00, 0x40, 0x60, 0x03, 0x00, 0x40, 0xC0,
0x01, 0x80, 0x01, 0x80, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x08, 0x10, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00  };

const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,     //logo uis
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x06, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x83, 
  0x06, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x83, 0x06, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 
  0x06, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x83, 0x06, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x07, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 
  0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x83, 0x06, 0x0c, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x83, 0x06, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0x06, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0x06, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x03, 0x06, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff
};


char auth[] = "qJfawJky3VG-14HEjZUgKcBsxqrurj_e";
char ssid[] = "Natalia";
char pass[] = "James2018";
BlynkTimer timer;

void Event()
{ 
  Blynk.virtualWrite(V5,beatsPerMinute);
  Serial.println("Heart rate:");  
  
  Blynk.virtualWrite(V6,I2C_SPEED_FAST);
 
}

void setup() {  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //inicio oled
  display.clearDisplay();
  display.drawBitmap(23, 0, myBitmap, 80, 50, WHITE);
  display.display();
  delay(3000);
  // Initialize sensor
  particleSensor.begin(Wire, 200000); I2C port, 200kHz velocidad
  particleSensor.setup(); //
  particleSensor.setPulseAmplitudeRed(0x0A); 
  Blynk.begin(auth, ssid, pass);
  // You can also specify server:
  //Blynk.begin(auth, ssid, pass, "blynk-cloud.com", 80);
  //Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);

  timer.setInterval(1000L,Event);

}

void loop() {
 long irValue = particleSensor.getIR();    
                                          
if(irValue > 7000){                                           
    display.clearDisplay();                                   
    display.drawBitmap(5, 5, logo2_bmp, 24, 21, WHITE);       
    display.setTextSize(2);                                   
    display.setTextColor(WHITE); 
    display.setCursor(50,0);                
    display.println("BPM");             
    display.setCursor(50,18);                
    display.println(beatAvg); 
    display.display();
    
  if (checkForBeat(irValue) == true)                        
  {
    display.clearDisplay();                               
    display.drawBitmap(0, 0, logo3_bmp, 32, 32, WHITE);    
    display.setTextSize(2);                                
    display.setTextColor(WHITE);             
    display.setCursor(50,0);                
    display.println("BPM");             
    display.setCursor(50,18);                
    display.println(beatAvg); 
    display.display();                            
    delay(100);                                        
    //We sensed a beat!
    long delta = millis() - lastBeat;                
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);           //Calculo Bpm

    if (beatsPerMinute < 255 && beatsPerMinute > 20)               //promedio Bpm
    {
      rates[rateSpot++] = (byte)beatsPerMinute; 
      rateSpot %= RATE_SIZE; //Wrap variable

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
    }
  }

}
  if (irValue < 7000){       
     display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);             
     display.setCursor(30,5);                
     display.println("Please Place "); 
     display.setCursor(30,15);
     display.println("your finger ");  
     display.display();
     }

  
  
  Blynk.run();
  timer.run();
}
